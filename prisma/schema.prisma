// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  profile       Profile?
  accounts      Account[]
  sessions      Session[]
}

model Profile {
  id            String  @id @default(cuid())
  avatar_url    String?
  html_url      String?
  repos_url     String?
  userName      String?
  company       String?
  blog          String?
  location      String?
  hireable      Boolean?
  bio           String?
  sidePanelImg  String?
  sidePanelAvatar String?
  fullImageUrl  String?
  jobTitle      String?
  githubUrl     String?
  twitterUrl    String?
  linkedinUrl   String?
  facebookUrl   String?
  instagramUrl  String?
  youtubeUrl    String?
  phone         String?
  resumeUrl     String?
  about         String?
  githubProfile GitHubProfile?
  skills        Skill[]
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId        String  @unique
}

model GitHubProfile {
  id         String  @id @default(cuid())
  avatar_url String?
  html_url   String?
  repos_url  String?
  userName   String?
  company    String?
  blog       String?
  location   String?
  hireable   Boolean?
  bio        String?
  profile    Profile @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  profileId  String  @unique
  repos      Repository[]
}

model Skill {
  id          Int @id @default(autoincrement()) @map("_id")
  name        String
  description String
  type        String
  imageUrl    String
  profile     Profile @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  profileId   String @unique
}

model Repository {
  id                  Int @id @default(autoincrement()) @map("_id")
  name                String
  fullName            String
  htmlUrl             String @unique
  description         String
  repositoryImageUrl  String @default("https://avatars.githubusercontent.com/u/35307862?v=4")
  githubProfile       GitHubProfile @relation(fields: [githubProfileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  githubProfileId     String @unique
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now())
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
