// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int @id @default(autoincrement()) @map("_id")
  userProfileid   Int @unique
  userProfile     UserProfile @relation(fields: [userProfileid], references: [id])
  githubProfileId Int @unique
  githubProfile   GitHubProfile @relation(fields: [githubProfileId], references: [id])
  finalProfileId  Int @unique
  finalProfile    FinalProfile @relation(fields: [finalProfileId], references: [id])
  password        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  repositories    Repository[]
  accounts        Account[]
  sessions        Session[]
}

model FinalProfile {
  id        Int @id @default(autoincrement()) @map("_id")
  user      User?
  userId    Int @unique
  login     String
  avatarUrl String
  htmlUrl   String
  reposUrl  String
  userName  String
  company   String
  blog      String
  location  String
  hireable  Boolean
  bio       String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GitHubProfile {
  id        Int @id @default(autoincrement()) @map("_id")
  login     String
  avatarUrl String
  htmlUrl   String
  reposUrl  String
  userName  String
  company   String
  blog      String
  location  String
  hireable  Boolean
  bio       String
  name      String?
  user      User?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserProfile {
  id                    Int @id @default(autoincrement()) @map("_id")
  name                  String
  avatarUrl             String
  company               String
  blog                  String
  location              String
  hireable              Boolean
  bio                   String
  sidePanelImageUrl     String?
  sidePanelImageAltUrl  String?
  fullImageUrl          String?
  jobTitle              String
  gitHubUrl             String?
  linkedInUrl           String?
  twitterUrl            String?
  facebookUrl           String?
  instagramUrl          String?
  email                 String
  phone                 String
  resumeDriveUrl        String?
  about                 String
  contactMessage        String
  skills                Skill[]
  user                  User?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model Skill {
  id          Int @id @default(autoincrement()) @map("_id")
  name        String
  description String
  type        String
  imageUrl    String
  authorId    Int @map("author_id")
  author      UserProfile? @relation(fields: [authorId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Repository {
  id                  Int @id @default(autoincrement()) @map("_id")
  name                String
  fullName            String
  htmlUrl             String @unique
  description         String
  repositoryImageUrl  String @default("https://avatars.githubusercontent.com/u/35307862?v=4")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now())
  authorId            Int @map("author_id")
  author              User? @relation(fields: [authorId], references: [id])
}

model Account {
  id                 String  @id @default(cuid())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
